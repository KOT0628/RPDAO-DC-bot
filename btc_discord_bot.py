import discord
from discord.ext import commands
from discord.ui import View, Button
import random
import requests
from PIL import Image, ImageDraw, ImageFont
import datetime
import asyncio
import tweepy
from dotenv import load_dotenv
import threading
import logging
import os
from flask import Flask

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
BEARER_TOKEN = os.getenv("TWITTER_BEARER_TOKEN")
TWITTER_USER_ID = os.getenv("TWITTER_USER_ID")
TWITTER_USERNAME = 'Red_Planet_Dao'        # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

GUILD_ID = 1249275519716036679             # –°–µ—Ä–≤–µ—Ä Discord
BTC_CHANNEL_ID = 1251146452223131812       # –ö–∞–Ω–∞–ª, –≥–¥–µ –º–µ–Ω—è–µ—Ç—Å—è –∏–º—è
TWITTER_CHANNEL_ID = 1249287351684038727   # –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–≤–∏—Ç—ã

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –±–æ—Ç–∞ ===
intents = discord.Intents.default()
intents.guilds = True
intents.messages = True
intents.message_content = True  # –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = commands.Bot(command_prefix='/', intents=intents)
tree = bot.tree  # –¥–ª—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥

# === –ü—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º ===
background_path = "background.jpg"   # –ø—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
font_path = "SpicyRice-Regular.ttf"  # –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É

# === –¢–≤–∏—Ç—Ç–µ—Ä –∫–ª–∏–µ–Ω—Ç ===
twitter_client = tweepy.Client(bearer_token=BEARER_TOKEN)  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Twitter

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
missing_vars = []
if not DISCORD_TOKEN: missing_vars.append("DISCORD_TOKEN")
if not GUILD_ID: missing_vars.append("GUILD_ID")
if not BTC_CHANNEL_ID: missing_vars.append("BTC_CHANNEL_ID")
if not TWITTER_CHANNEL_ID: missing_vars.append("TWITTER_CHANNEL_ID")

if missing_vars:
    raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")

# === HTTP –°–µ—Ä–≤–µ—Ä (–¥–ª—è Render) ===
app = Flask(__name__)
@app.route("/")
def index():
    return "Bot is running."

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler("logs.txt", encoding="utf-8"),
        logging.StreamHandler()  # —á—Ç–æ–±—ã –ª–æ–≥–∏ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–ª–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
PRICE_FILE = "last_price.txt"  # –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É BTC

def load_last_price():
    if os.path.exists(PRICE_FILE):
        with open(PRICE_FILE, "r") as f:
            try:
                return float(f.read().strip())
            except:
                return None
    return None

def save_last_price(price):
    with open(PRICE_FILE, "w") as f:
        f.write(str(price))

LAST_TWEET_FILE = "last_tweet.txt"  # –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–≤–∏—Ç

def load_last_tweet_id():
    if os.path.exists(LAST_TWEET_FILE):
        with open(LAST_TWEET_FILE, "r") as f:
            return f.read().strip()
    return None

def save_last_tweet_id(tweet_id):
    with open(LAST_TWEET_FILE, "w") as f:
        f.write(str(tweet_id))

last_tweet_id = load_last_tweet_id()  # –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—à–∏–π —Ç–≤–∏—Ç
previous_price = load_last_price()    # –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
seen_tweet_ids = set()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC ===
async def get_btc_price():
    url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
    response = requests.get(url)
    data = response.json()
    return round(data["bitcoin"]["usd"], 2)

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ BTC ===
async def update_btc_channel_name():
    global previous_price
    try:
        current_price = await get_btc_price()
        guild = bot.get_guild(GUILD_ID)
        if guild is None:
            logging.error("‚ùå Guild not found.")
            return
        channel = guild.get_channel(BTC_CHANNEL_ID)
        if not channel:
            logging.error(f"‚ùå [BTC] –ö–∞–Ω–∞–ª —Å ID {BTC_CHANNEL_ID} not found.")
            return

        if previous_price is not None:
            if current_price > previous_price:
                emoji = "üü¢‚¨à"  # –∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                color = "–∑–µ–ª—ë–Ω—ã–π"
            elif current_price < previous_price:
                emoji = "üî¥‚¨ä"  # –∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ –∏ —Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                color = "–∫—Ä–∞—Å–Ω—ã–π"
            else:
                emoji = "‚ö™"
                color = "–±–µ–ª—ã–π"
        else:
            emoji = "üü°"
            color = "–∂—ë–ª—Ç—ã–π (–ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)"

        new_name = f"{emoji} BTC: $ {current_price}"
        await channel.edit(name=new_name)
        logging.info(f"–¶–µ–Ω–∞ BTC: ${new_name} ({color})")
        previous_price = current_price
        save_last_price(current_price)
    except Exception as e:
        logging.error(f"[BTC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429
    except discord.errors.HTTPException as e:
        if e.status == 429:
            logging.warning("[DISCORD] Rate limit: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.")
        else:
            logging.error(f"[DISCORD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def create_price_image(price):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img = Image.open(background_path)
    draw = ImageDraw.Draw(img)
    text = f"BTC\n${price}"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype(font_path, 140)
    
    x, y = 35, 20  # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    
    # –¶–≤–µ—Ç–∞
    main_color = (255, 0, 0)          # –∫—Ä–∞—Å–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    shadow_color = (0, 0, 0)          # —á—ë—Ä–Ω–∞—è —Ç–µ–Ω—å
    outline_color = (255, 215, 0)     # –∑–æ–ª–æ—Ç–æ–π –∫–æ–Ω—Ç—É—Ä

    # –†–∏—Å—É–µ–º –¢–ï–ù–¨ (—Å–º–µ—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    draw.text((x+4, y+4), text, font=font, fill=shadow_color)
    
    # –†–∏—Å—É–µ–º –ö–û–ù–¢–£–† (–æ–±–≤–æ–¥–∫—É) ‚Äî –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–∞
    for dx in [-2, -1, 1, 2]:
        for dy in [-2, -1, 1, 2]:
            if dx or dy:
                draw.text((x+dx, y+dy), text, font=font, fill=outline_color)
    
    # –†–∏—Å—É–µ–º –°–ê–ú –¢–ï–ö–°–¢
    draw.text((x, y), text, font=font, fill=main_color)
    
    output_path = "btc_price_output.jpg"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    img.save(output_path)
    return output_path

# === –ö–æ–º–∞–Ω–¥—ã ===
# –ö–æ–º–∞–Ω–¥–∞ /price
@tree.command(name="price", description="Show current BTC price", guild=discord.Object(id=GUILD_ID))
async def slash_price(interaction: discord.Interaction):
    allowed_channel_id = 1249289752998445109  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if interaction.channel.id != allowed_channel_id:
        await interaction.response.send_message(f"‚ùå This command is only available in the channel <#{allowed_channel_id}>", ephemeral=True)
        return
    if not os.path.exists(background_path):
        raise FileNotFoundError(f"Background image not found: {background_path}")
    if not os.path.exists(font_path):
        raise FileNotFoundError(f"Font not found: {font_path}")
    try:
        await interaction.response.defer()
        price = await get_btc_price()
        image_path = create_price_image(price)
        if not os.path.exists(image_path):
            await interaction.followup.send("‚ùå Failed to create image.")
            return
        await interaction.followup.send(
            content=f"Current price $BTC: ${price}",
            file=discord.File(image_path)
        )
        logging.info(f"–ò—Å–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /price –¶–µ–Ω–∞ BTC: ${price}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /price: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /roll
@tree.command(name="roll", description="Random number 0-100", guild=discord.Object(id=GUILD_ID))
async def slash_roll(interaction: discord.Interaction):
    allowed_channel_id = 1375863859616677980  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if interaction.channel.id != allowed_channel_id:
        await interaction.response.send_message(f"‚ùå This command is only available in the channel <#{allowed_channel_id}>", ephemeral=True)
        return
    number = random.randint(0, 100)
    await interaction.response.send_message(f"üé≤ **{number}**")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ ID
    logging.info(f"/roll –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª: {interaction.user} (ID: {interaction.user.id}) ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {number}")

# === –¢–≤–∏—Ç—ã ===
async def fetch_and_send_tweets():
    global last_tweet_id
    try:
        if not TWITTER_USER_ID:
            logging.error("‚ùå TWITTER_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")
            return
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —Ä–µ—Ç–≤–∏—Ç—ã –∏ —Ä–µ–ø–ª–∞–∏
        tweets = twitter_client.get_users_tweets(
            id=TWITTER_USER_ID,
            max_results=5,
            tweet_fields=['created_at', 'referenced_tweets', 'attachments'],
            expansions=['attachments.media_keys'],
            media_fields=['url']
        )
        if tweets.data:
            channel = bot.get_guild(GUILD_ID).get_channel(TWITTER_CHANNEL_ID)
            media = {m["media_key"]: m for m in tweets.includes.get("media", [])} if tweets.includes else {}
            for tweet in reversed(tweets.data):
                if tweet.referenced_tweets:
                    continue
                
                if last_tweet_id and str(tweet.id) <= str(last_tweet_id):
                    continue  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                
                tweet_url = f"https://twitter.com/{TWITTER_USERNAME}/status/{tweet.id}"
                
                # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
                view = View()
                view.add_item(Button(label="Open in Twitter", url=tweet_url, style=discord.ButtonStyle.link))
                view.add_item(Button(label="üîÅ Retweet", url=f"https://twitter.com/intent/retweet?tweet_id={tweet.id}", style=discord.ButtonStyle.link))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed
                embed = discord.Embed(
                    title="üì¢ New tweet!",
                    description=tweet.text,
                    url=tweet_url,
                    color=discord.Color.blue()
                )
                embed.set_footer(text="Red_Planet_Dao")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if tweet.attachments and "media_keys" in tweet.attachments:
                    for key in tweet.attachments["media_keys"]:
                        if key in media and media[key].type == "photo":
                            embed.set_image(url=media[key].url)
                            break
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
                msg = await channel.send(embed=embed, view=view)
                
                # –î–æ–±–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏–∏
                await msg.add_reaction("‚ù§Ô∏è")
                await msg.add_reaction("üîÅ")
                await msg.add_reaction("üî¥")
                
                seen_tweet_ids.add(tweet.id)
                last_tweet_id = tweet.id
                save_last_tweet_id(last_tweet_id)
                logging.info(f"[TWITTER] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–≤–∏—Ç ID: {tweet.id}")
        else:
            logging.info("[TWITTER] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤.")
    except Exception as e:
        logging.error(f"[TWITTER] –û—à–∏–±–∫–∞: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429
    except tweepy.TooManyRequests as e:
        logging.warning(f"[TWITTER] ‚ùó –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –ñ–¥—ë–º 20 –º–∏–Ω—É—Ç.")

# === –¶–∏–∫–ª—ã –∑–∞–¥–∞—á ===
# –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–¥—ë—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async def btc_loop():
    await bot.wait_until_ready()
    while True:
        await update_btc_channel_name()  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC
        await asyncio.sleep(600)         # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def twitter_loop():
    await bot.wait_until_ready()
    while True:
        await fetch_and_send_tweets()     # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–≤–∏—Ç–æ–≤
        await asyncio.sleep(1200)         # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç

@bot.event
async def on_ready():
    logging.info(f"‚úÖ –ë–æ—Ç –≤–æ—à—ë–ª –∫–∞–∫ {bot.user}")
    await tree.sync(guild=discord.Object(id=GUILD_ID))
    asyncio.create_task(btc_loop())
    asyncio.create_task(twitter_loop())

# === –ó–∞–ø—É—Å–∫ ===
def run_web():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))

if __name__ == "__main__":
    threading.Thread(target=run_web).start()
    bot.run(DISCORD_TOKEN)
    
